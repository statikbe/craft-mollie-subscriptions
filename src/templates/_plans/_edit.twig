{# @var craft \craft\web\twig\variables\CraftVariable #}

{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}

{% set fullPageForm = true %}
{% set title = plan.title is defined ? plan.title : 'New subscription plan' %}
{% set selectedSubnavItem = 'plans' %}

{% set crumbs = [
    { label: "Subscriptions", url: cpUrl('mollie-subscriptions') },
    { label: 'Plans', url: cpUrl('mollie-subscriptions/plans') },
    { label: 'Edit', url: '#'}
] %}

{# The content of the CP Section#}
{% block content %}
    {% if plan is defined and plan.getErrors()|length %}
        {% set errors = plan.getErrors() %}
    {% endif %}

    {{ csrfInput() }}
    {{ actionInput('mollie-subscriptions/plan/save') }}
    {{ redirectInput('mollie-subscriptions/plans') }}
    {% if plan is defined and plan.id is defined %}
        <input type="hidden" name="planId" value="{{ plan.id }}">
    {% endif %}


    {{ forms.textField({
        label: 'Title'|t('mollie-subscriptions'),
        instructions: 'What this plan will be called in the CP'|t('mollie-subscriptions'),
        id: 'title',
        required: true,
        name: 'title',
        value: plan is defined ? plan.title : '',
        errors: errors is defined and errors.title is defined ? errors.title,
    }) }}

    {{ forms.textField({
        label: 'Handle'|t('mollie-subscriptions'),
        instructions: 'How youâ€™ll refer to this field in the templates'|t('mollie-subscriptions'),
        id: 'handle',
        required: true,
        name: 'handle',
        value: plan is defined ? plan.handle : '',
        errors: errors is defined and errors.handle is defined ? errors.handle
    }) }}

    {% set availableCurrencies = { '': '---'} %}
    {% for id, currency in currencies %}
        {% set availableCurrencies = availableCurrencies|merge([{
            'label': currency.short  ~ '('~currency.symbol~')',
            'value': id
        }]) %}
    {% endfor %}
    {{ forms.selectField({
        label: "Currency"|t('mollie-subscriptions'),
        id: "currency",
        required: true,
        name: "currency",
        options: availableCurrencies,
        value: plan is defined? plan.currency ?? "",
        errors: errors is defined and errors.currency is defined ? errors.currency
    }) }}

    {{ forms.textField({
        label: 'Payment description'|t('mollie-subscriptions'),
        instructions: 'A description unique per subscription. This will be included in the payment description.. You can include tags that output entry properties, such as {myCustomField}. Defaults to "Order #payment.id".'|t('mollie-subscriptions'),
        id: 'description',
        name: 'description',
        required: true,
        value: plan is defined ? plan.description : '',
        errors: errors is defined and errors.description is defined ? errors.description
    }) }}

    {{ forms.textField({
        label: 'Price'|t('mollie-subscriptions'),
        instructions: 'Price the subscribers will be charged. If you leave the price empty, you can have the use choose their own price when they subscribe'|t('mollie-subscriptions'),
        id: 'amount',
        name: 'amount',
        value: plan is defined ? plan.amount : '',
        errors: errors is defined and errors.amount is defined ? errors.amount
    }) }}

    {{ forms.textField({
        label: 'Number of charges in the subscription plan'|t('mollie-subscriptions'),
        instructions: 'Total number of charges for the subscription to complete. Leave empty for an ongoing subscription.'|t('mollie-subscriptions'),
        id: 'times',
        name: 'times',
        value: plan is defined ? plan.times : '',
        errors: errors is defined and errors.times is defined ? errors.times
    }) }}

    <input type="hidden" name="intervalType" value="months">
    {{ forms.selectField({
        label: 'Subscription interval'|t('mollie-subscriptions'),
        instructions: 'Interval to wait between charges.'|t('mollie-subscriptions'),
        id: 'interval',
        required: true,
        name: 'interval',
        options: [
            { 'label': '---', 'value': '' },
            { 'label': 'Every month', 'value': 1 },
            { 'label': 'Every 2 months', 'value': 2 },
            { 'label': 'Every 3 months', 'value': 3 },
            { 'label': 'Every 4 months', 'value': 4 },
            { 'label': 'Every 6 months', 'value': 6 },
            { 'label': 'Every year', 'value': 12 }
        ],
        value: plan is defined ? plan.interval : '',
        errors: errors is defined and errors.interval is defined ? errors.interval
    }) }}

    {% if plan is not defined or not plan.handle|length %}
        {% js %}
            new Craft.HandleGenerator('#title', '#handle');
        {% endjs %}
    {% endif %}

    {% from '_includes/forms' import fieldLayoutDesignerField %}

    {{ fieldLayoutDesignerField({
        instructions: instructions ?? null,
        customizableTabs: customizableTabs ?? true,
        customizableUi: true,
        pretendTabName: pretendTabName ?? 'Content'|t('app'),
        fieldLayout: (layout ?? false) ?: null,
    }) }}

{% endblock %}
